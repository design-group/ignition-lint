def doGet(request, session):
	"""
	Test endpoint for Redis bulk operations (MSET, MGET, batch operations)
	GET /test-redis-bulk - Lists all bulk operations
	GET /test-redis-bulk?action=mset&keys=key1,key2&values=val1,val2 - Set multiple keys
	GET /test-redis-bulk?action=mget&keys=key1,key2 - Get multiple keys
	"""

	try:
		# Get URL parameters correctly
		params = request['params']
		action = params.get('action', 'list')
		if isinstance(action, list):
			action = action[0] if action else 'list'

		if action == 'list':
			# Return available Redis bulk operations
			return {
				'json': {
					'success': True,
					'operations': [
						'mset - Set multiple key-value pairs at once',
						'mget - Get multiple values at once',
						'msetnx - Set multiple keys only if none exist',
						'zadd - Add members to sorted set'
					],
					'examples': {
						'mset': '/test-redis-bulk?action=mset&keys=test:k1,test:k2&values=v1,v2',
						'mget': '/test-redis-bulk?action=mget&keys=test:k1,test:k2',
						'msetnx': '/test-redis-bulk?action=msetnx&keys=test:k1,test:k2&values=v1,v2',
						'zadd': '/test-redis-bulk?action=zadd&key=test:scores&members=alice,bob&scores=100,200'
					}
				}
			}

		elif action == 'mset':
			keys_param = params.get('keys')
			if isinstance(keys_param, list):
				keys_param = keys_param[0] if keys_param else None
			if not keys_param:
				return {'json': {'success': False, 'error': 'Missing required parameter: keys'}}

			values_param = params.get('values')
			if isinstance(values_param, list):
				values_param = values_param[0] if values_param else None
			if not values_param:
				return {'json': {'success': False, 'error': 'Missing required parameter: values'}}

			# Parse comma-separated keys and values
			keys = [k.strip() for k in keys_param.split(',') if k.strip()]
			values = [v.strip() for v in values_param.split(',') if v.strip()]

			if len(keys) != len(values):
				return {'json': {'success': False, 'error': 'Keys and values count must match'}}

			try:
				# Create key-value map and use mset
				key_values = dict(zip(keys, values))
				system.redis.mset('redis', key_values)

				return {
					'json': {
						'success': True,
						'message': 'Multiple keys set successfully',
						'key_count': len(keys),
						'key_values': key_values
					}
				}
			except Exception as e:
				return {
					'json': {
						'success': False,
						'error': str(e),
						'keys': keys
					}
				}

		elif action == 'mget':
			keys_param = params.get('keys')
			if isinstance(keys_param, list):
				keys_param = keys_param[0] if keys_param else None
			if not keys_param:
				return {'json': {'success': False, 'error': 'Missing required parameter: keys'}}

			# Parse comma-separated keys
			keys = [k.strip() for k in keys_param.split(',') if k.strip()]

			try:
				# Use mget to get multiple values
				result = system.redis.mget('redis', *keys)

				return {
					'json': {
						'success': True,
						'keys': keys,
						'values': result,
						'key_count': len(keys)
					}
				}
			except Exception as e:
				return {
					'json': {
						'success': False,
						'error': str(e),
						'keys': keys
					}
				}

		elif action == 'msetnx':
			keys_param = params.get('keys')
			if isinstance(keys_param, list):
				keys_param = keys_param[0] if keys_param else None
			if not keys_param:
				return {'json': {'success': False, 'error': 'Missing required parameter: keys'}}

			values_param = params.get('values')
			if isinstance(values_param, list):
				values_param = values_param[0] if values_param else None
			if not values_param:
				return {'json': {'success': False, 'error': 'Missing required parameter: values'}}

			# Parse comma-separated keys and values
			keys = [k.strip() for k in keys_param.split(',') if k.strip()]
			values = [v.strip() for v in values_param.split(',') if v.strip()]

			if len(keys) != len(values):
				return {'json': {'success': False, 'error': 'Keys and values count must match'}}

			try:
				# Create key-value map and use msetnx
				key_values = dict(zip(keys, values))
				result = system.redis.msetnx('redis', key_values)

				return {
					'json': {
						'success': True,
						'message': 'MSETNX operation completed',
						'all_set': result,
						'key_count': len(keys),
						'key_values': key_values
					}
				}
			except Exception as e:
				return {
					'json': {
						'success': False,
						'error': str(e),
						'keys': keys
					}
				}

		elif action == 'zadd':
			key = params.get('key')
			if isinstance(key, list):
				key = key[0] if key else None
			if not key:
				return {'json': {'success': False, 'error': 'Missing required parameter: key'}}

			members_param = params.get('members')
			if isinstance(members_param, list):
				members_param = members_param[0] if members_param else None
			if not members_param:
				return {'json': {'success': False, 'error': 'Missing required parameter: members'}}

			scores_param = params.get('scores')
			if isinstance(scores_param, list):
				scores_param = scores_param[0] if scores_param else None
			if not scores_param:
				return {'json': {'success': False, 'error': 'Missing required parameter: scores'}}

			# Parse comma-separated members and scores
			members = [m.strip() for m in members_param.split(',') if m.strip()]
			scores_str = [s.strip() for s in scores_param.split(',') if s.strip()]

			if len(members) != len(scores_str):
				return {'json': {'success': False, 'error': 'Members and scores count must match'}}

			try:
				# Convert scores to floats and create member-score map
				scores = [float(s) for s in scores_str]
				member_scores = dict(zip(members, scores))

				# Use zadd to add members to sorted set
				added_count = system.redis.zadd('redis', key, member_scores)

				return {
					'json': {
						'success': True,
						'message': 'Members added to sorted set',
						'key': key,
						'added_count': added_count,
						'member_scores': member_scores
					}
				}
			except ValueError as e:
				return {
					'json': {
						'success': False,
						'error': 'Invalid score values - must be numbers',
						'scores': scores_str
					}
				}
			except Exception as e:
				return {
					'json': {
						'success': False,
						'error': str(e),
						'key': key
					}
				}

		else:
			return {'json': {'success': False, 'error': 'Unknown action: ' + str(action)}}

	except Exception as e:
		import traceback
		return {
			'json': {
				'success': False,
				'error': str(e),
				'type': type(e).__name__,
				'traceback': traceback.format_exc()
			}
		}
