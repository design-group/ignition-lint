def doGet(request, session):
	"""
	Test endpoint for Redis hash operations (HSET, HGET, HGETALL)
	GET /test-redis-hash - Lists all hash operations
	GET /test-redis-hash?action=hset&key=user:123&field=name&value=john - Set hash field
	GET /test-redis-hash?action=hget&key=user:123&field=name - Get hash field value
	"""

	try:
		# Get URL parameters correctly
		params = request['params']
		action = params.get('action', 'list')
		if isinstance(action, list):
			action = action[0] if action else 'list'

		if action == 'list':
			# Return available Redis hash operations
			return {
				'json': {
					'success': True,
					'operations': [
						'hset - Set a field in a Redis hash',
						'hget - Get a field value from a Redis hash',
						'hgetAll - Get all fields and values from a Redis hash'
					],
					'examples': {
						'hset': '/test-redis-hash?action=hset&key=user:123&field=name&value=john',
						'hget': '/test-redis-hash?action=hget&key=user:123&field=name',
						'hgetAll': '/test-redis-hash?action=hgetAll&key=user:123'
					}
				}
			}

		elif action == 'hset':
			key = params.get('key')
			if isinstance(key, list):
				key = key[0] if key else None
			if not key:
				return {'json': {'success': False, 'error': 'Missing required parameter: key'}}

			field = params.get('field')
			if isinstance(field, list):
				field = field[0] if field else None
			if not field:
				return {'json': {'success': False, 'error': 'Missing required parameter: field'}}

			value = params.get('value')
			if isinstance(value, list):
				value = value[0] if value else None
			if not value:
				return {'json': {'success': False, 'error': 'Missing required parameter: value'}}

			try:
				# Set hash field using system.redis directly
				system.redis.hset('redis', key, field, value)

				return {
					'json': {
						'success': True,
						'message': 'Hash field set successfully',
						'key': key,
						'field': field,
						'value': value
					}
				}
			except Exception as e:
				return {
					'json': {
						'success': False,
						'error': str(e),
						'key': key,
						'field': field
					}
				}

		elif action == 'hget':
			key = params.get('key')
			if isinstance(key, list):
				key = key[0] if key else None
			if not key:
				return {'json': {'success': False, 'error': 'Missing required parameter: key'}}

			field = params.get('field')
			if isinstance(field, list):
				field = field[0] if field else None
			if not field:
				return {'json': {'success': False, 'error': 'Missing required parameter: field'}}

			try:
				# Get hash field value using system.redis directly
				value = system.redis.hget('redis', key, field)

				return {
					'json': {
						'success': True,
						'key': key,
						'field': field,
						'value': value
					}
				}
			except Exception as e:
				return {
					'json': {
						'success': False,
						'error': str(e),
						'key': key,
						'field': field
					}
				}

		elif action == 'hgetAll':
			key = params.get('key')
			if isinstance(key, list):
				key = key[0] if key else None
			if not key:
				return {'json': {'success': False, 'error': 'Missing required parameter: key'}}

			try:
				# Get all hash fields and values using system.redis directly
				hash_data = system.redis.hgetAll('redis', key)

				return {
					'json': {
						'success': True,
						'key': key,
						'hash': hash_data if hash_data else {},
						'field_count': len(hash_data) if hash_data else 0
					}
				}
			except Exception as e:
				return {
					'json': {
						'success': False,
						'error': str(e),
						'key': key
					}
				}

		else:
			return {'json': {'success': False, 'error': 'Unknown action: ' + str(action)}}

	except Exception as e:
		import traceback
		return {
			'json': {
				'success': False,
				'error': str(e),
				'type': type(e).__name__,
				'traceback': traceback.format_exc()
			}
		}
