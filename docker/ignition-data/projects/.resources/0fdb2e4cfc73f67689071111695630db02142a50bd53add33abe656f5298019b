def doGet(request, session):
	"""
	Test endpoint for Redis utility functions (connection testing, TTL, etc.)
	GET /test-redis-utils - Lists all utility operations
	GET /test-redis-utils?action=test_connection - Test connection to Redis
	GET /test-redis-utils?action=get_ttl&key=test - Get TTL for a key
	"""

	try:
		# Get URL parameters correctly
		params = request['params']
		action = params.get('action', 'list')
		if isinstance(action, list):
			action = action[0] if action else 'list'

		if action == 'list':
			# Return available Redis utility operations
			return {
				'json': {
					'success': True,
					'operations': [
						'test_connection - Test connection to Redis server',
						'get_connections - Get list of available connections',
						'get_ttl - Get time-to-live for a key',
						'clear_test_keys - Clear all keys matching test pattern'
					],
					'examples': {
						'test_connection': '/test-redis-utils?action=test_connection',
						'get_connections': '/test-redis-utils?action=get_connections',
						'get_ttl': '/test-redis-utils?action=get_ttl&key=test:123',
						'clear_test_keys': '/test-redis-utils?action=clear_test_keys&pattern=test:*'
					}
				}
			}

		elif action == 'test_connection':
			try:
				# Test the connection using system.redis directly
				is_connected = system.redis.testConnection('redis')

				return {
					'json': {
						'success': True,
						'connection': 'redis',
						'connected': is_connected
					}
				}
			except Exception as e:
				return {
					'json': {
						'success': False,
						'error': str(e),
						'connection': 'redis'
					}
				}

		elif action == 'get_connections':
			try:
				# Get list of connections using system.redis directly
				connections = system.redis.getConnectionNames()

				return {
					'json': {
						'success': True,
						'connections': list(connections) if connections else [],
						'count': len(connections) if connections else 0
					}
				}
			except Exception as e:
				return {
					'json': {
						'success': False,
						'error': str(e)
					}
				}

		elif action == 'get_ttl':
			key = params.get('key')
			if isinstance(key, list):
				key = key[0] if key else None
			if not key:
				return {'json': {'success': False, 'error': 'Missing required parameter: key'}}

			try:
				# Get TTL using system.redis directly
				ttl = system.redis.getTTL('redis', key)

				return {
					'json': {
						'success': True,
						'key': key,
						'ttl_millis': ttl,
						'ttl_seconds': ttl / 1000.0 if ttl > 0 else ttl
					}
				}
			except Exception as e:
				return {
					'json': {
						'success': False,
						'error': str(e),
						'key': key
					}
				}

		elif action == 'clear_test_keys':
			pattern = params.get('pattern', 'test:*')
			if isinstance(pattern, list):
				pattern = pattern[0] if pattern else 'test:*'

			try:
				# Get keys matching pattern and delete them
				keys_to_delete = system.redis.keys('redis', pattern)
				deleted_count = 0

				if keys_to_delete:
					for key in keys_to_delete:
						deleted_count += system.redis.delete('redis', key)

				return {
					'json': {
						'success': True,
						'pattern': pattern,
						'deleted_count': deleted_count,
						'keys_deleted': list(keys_to_delete) if keys_to_delete else []
					}
				}
			except Exception as e:
				return {
					'json': {
						'success': False,
						'error': str(e),
						'pattern': pattern
					}
				}

		else:
			return {'json': {'success': False, 'error': 'Unknown action: ' + str(action)}}

	except Exception as e:
		import traceback
		return {
			'json': {
				'success': False,
				'error': str(e),
				'type': type(e).__name__,
				'traceback': traceback.format_exc()
			}
		}
