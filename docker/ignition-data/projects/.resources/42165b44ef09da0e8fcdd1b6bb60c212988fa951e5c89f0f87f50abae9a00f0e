def doGet(request, session):
	"""
	Test endpoint for Redis type preservation, specifically Date objects
	GET /test-redis-types - Lists all type testing operations
	GET /test-redis-types?action=test_date - Tests Date serialization/deserialization
	"""

	try:
		# Get URL parameters correctly
		params = request['params']
		action = params.get('action', 'list')
		if isinstance(action, list):
			action = action[0] if action else 'list'

		if action == 'list':
			# Return available type testing operations
			return {
				'json': {
					'success': True,
					'operations': [
						'test_date - Test Date object serialization and deserialization',
						'test_all_types - Test various data type preservation'
					],
					'examples': {
						'test_date': '/test-redis-types?action=test_date',
						'test_all_types': '/test-redis-types?action=test_all_types'
					}
				}
			}

		elif action == 'test_date':
			from java.util import Date, Calendar, TimeZone

			try:
				# Create test dates with specific characteristics
				current_date = Date()

				# Create a date with specific timezone (EST)
				est_tz = TimeZone.getTimeZone("America/New_York")
				cal = Calendar.getInstance(est_tz)
				cal.set(2023, Calendar.DECEMBER, 25, 10, 30, 45)  # Dec 25, 2023, 10:30:45 AM EST
				specific_date = cal.getTime()

				# Test current date
				system.redis.set('redis', 'test:date:current', current_date)
				retrieved_current = system.redis.get('redis', 'test:date:current')

				# Test specific date
				system.redis.set('redis', 'test:date:specific', specific_date)
				retrieved_specific = system.redis.get('redis', 'test:date:specific')

				# Clean up
				system.redis.delete('redis', 'test:date:current')
				system.redis.delete('redis', 'test:date:specific')

				return {
					'json': {
						'success': True,
						'results': {
							'current_date': {
								'original_millis': current_date.getTime(),
								'retrieved_millis': retrieved_current.getTime() if isinstance(retrieved_current, Date) else None,
								'types_match': isinstance(retrieved_current, Date),
								'values_match': current_date.getTime() == (retrieved_current.getTime() if isinstance(retrieved_current, Date) else -1)
							},
							'specific_date': {
								'original_millis': specific_date.getTime(),
								'retrieved_millis': retrieved_specific.getTime() if isinstance(retrieved_specific, Date) else None,
								'types_match': isinstance(retrieved_specific, Date),
								'values_match': specific_date.getTime() == (retrieved_specific.getTime() if isinstance(retrieved_specific, Date) else -1)
							}
						}
					}
				}
			except Exception as e:
				return {
					'json': {
						'success': False,
						'error': str(e),
						'type': type(e).__name__
					}
				}

		elif action == 'test_all_types':
			from java.util import Date
			from com.inductiveautomation.ignition.common.util import DatasetBuilder

			try:
				# Create a simple dataset for testing using native approach
				headers = ["ID", "Name"]
				data = [[1, "Test"]]
				test_dataset = system.dataset.toDataSet(headers, data)

				# Test various data types including Date and Dataset
				test_data = {
					'string': 'Hello World',
					'integer': 42,
					'long': 9223372036854775807,  # Max long value
					'double': 3.14159,
					'boolean': True,
					'date': Date(),
					'dataset': test_dataset,
					'list': [1, 2, 'three', True],
					'map': {'key1': 'value1', 'key2': 42, 'key3': True}
				}

				results = {}

				for key, value in test_data.items():
					test_key = 'test:types:' + key
					try:
						# Store and retrieve
						system.redis.set('redis', test_key, value)
						retrieved = system.redis.get('redis', test_key)

						# For Date objects, compare millis values
						if isinstance(value, Date) and isinstance(retrieved, Date):
							values_match = value.getTime() == retrieved.getTime()
						# For Dataset objects, compare structure and some values
						elif hasattr(value, 'getRowCount') and hasattr(retrieved, 'getRowCount'):
							values_match = (
								value.getRowCount() == retrieved.getRowCount() and
								value.getColumnCount() == retrieved.getColumnCount()
							)
						else:
							values_match = value == retrieved

						results[key] = {
							'original_type': type(value).__name__,
							'original_value': str(value),
							'retrieved_type': type(retrieved).__name__ if retrieved is not None else 'None',
							'retrieved_value': str(retrieved) if retrieved is not None else 'None',
							'types_match': type(value) == type(retrieved),
							'values_match': values_match
						}

						# Clean up
						system.redis.delete('redis', test_key)

					except Exception as e:
						results[key] = {
							'error': str(e),
							'error_type': type(e).__name__
						}

				return {
					'json': {
						'success': True,
						'results': results
					}
				}
			except Exception as e:
				return {
					'json': {
						'success': False,
						'error': str(e),
						'type': type(e).__name__
					}
				}

		else:
			return {'json': {'success': False, 'error': 'Unknown action: ' + str(action)}}

	except Exception as e:
		import traceback
		return {
			'json': {
				'success': False,
				'error': str(e),
				'type': type(e).__name__,
				'traceback': traceback.format_exc()
			}
		}
